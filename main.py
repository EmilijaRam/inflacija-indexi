import requests
import pandas as pd
from datetime import datetime, timedelta
import openpyxl
import calendar
import numpy as np
import numpy as np
import pandas as pd
from pandas.tseries.offsets import DateOffset
import matplotlib.pyplot as plt

# === –ü–∞—Ç–µ–∫–∞ –¥–æ Excel —Ñ–∞—ò–ª–æ—Ç ===
file_path = 'Indexi za trosoci na zivot.xlsx'

# === –ß–∏—Ç–∞—ö–µ –Ω–∞ —Ç–∞–±–µ–ª–∞—Ç–∞ ===
df = pd.read_excel(file_path)
df.columns = df.columns.str.strip()


df['–ú–µ—Å–µ—Ü'] = pd.to_datetime(df['–ú–µ—Å–µ—Ü'], dayfirst=True, errors='coerce')
df = df.sort_values('–ú–µ—Å–µ—Ü').reset_index(drop=True)

# –ó–∞–æ–∫—Ä—É–∂–∏ —ò–∞ –∫–æ–ª–æ–Ω–∞—Ç–∞ '–ò–Ω–¥–µ–∫—Å' –Ω–∞ 2 –¥–µ—Ü–∏–º–∞–ª–∏
df['–ò–Ω–¥–µ–∫—Å'] = df['–ò–Ω–¥–µ–∫—Å'].astype(float).round(2)
print(df['–ò–Ω–¥–µ–∫—Å'].head(15))


# === –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –º–µ—Å–µ—Ü –∑–∞ –∫–æ—ò —Ç—Ä–µ–±–∞ –¥–∞ —Å–µ –≤–Ω–µ—Å–µ –ø–æ–¥–∞—Ç–æ–∫ ===
today = datetime.today()
target_month = today.replace(day=1) - timedelta(days=1)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–µ—ú–µ –ø–æ—Å—Ç–æ–∏ —Ç–æ—ò –º–µ—Å–µ—Ü –≤–æ —Ç–∞–±–µ–ª–∞—Ç–∞ ===
if any((df['–ú–µ—Å–µ—Ü'].dt.month == target_month.month) & (df['–ú–µ—Å–µ—Ü'].dt.year == target_month.year)):
    print(f"‚úÖ –ü–æ–¥–∞—Ç–æ–∫–æ—Ç –∑–∞ {target_month.strftime('%B %Y')} –≤–µ—ú–µ –ø–æ—Å—Ç–æ–∏ –≤–æ —Ç–∞–±–µ–ª–∞—Ç–∞.")
else:
    month_code_map = {
        '2025-04': '258',
        # –¥–æ–¥–∞–¥–∏ –Ω–æ–≤–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–∞
    }
    month_key = target_month.strftime('%Y-%m')
    if month_key not in month_code_map:
        print(f"‚ö†Ô∏è –ù–µ–º–∞ –∫–æ–¥ –∑–∞ –º–µ—Å–µ—Ü–æ—Ç {month_key}. –ê–∂—É—Ä–∏—Ä–∞—ò —ò–∞ –º–∞–ø–∞—Ç–∞.")
    else:
        json_query = {
            "query": [
                {"code": "–ú–µ—Å–µ—Ü", "selection": {"filter": "item", "values": [month_code_map[month_key]]}},
                {"code": "–ë–∞–∑–µ–Ω –ø–µ—Ä–∏–æ–¥", "selection": {"filter": "item", "values": ["2"]}},
                {"code": "–ì–ª–∞–≤–Ω–∏ COICOP –≥—Ä—É–ø–∏", "selection": {"filter": "item", "values": ["0"]}}
            ],
            "response": {"format": "json"}
        }
        url = "https://makstat.stat.gov.mk:443/PXWeb/api/v1/mk/MakStat/Ceni/IndeksTrosZivot/TrosociZivot/120_CeniTr_Mk_IndTroZi_ml.px"
        response = requests.post(url, json=json_query)
        if response.status_code == 200:
            try:
                value = response.json()['data'][0]['values'][0]
                last_day = target_month.replace(day=calendar.monthrange(target_month.year, target_month.month)[1])
                new_row = pd.DataFrame([[last_day, round(float(value), 2)]], columns=['–ú–µ—Å–µ—Ü', '–ò–Ω–¥–µ–∫—Å'])
                df = pd.concat([df, new_row], ignore_index=True)
                df['–ò–Ω–¥–µ–∫—Å'] = df['–ò–Ω–¥–µ–∫—Å'].astype(float).round(2)  # –û–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞ –¥–µ–∫–∞ –Ω–æ–≤–∏—Ç–µ –ø–æ–¥–∞—Ç–æ—Ü–∏ —Å–µ –∑–∞–æ–∫—Ä—É–∂–µ–Ω–∏
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–¥–∞–¥–µ–Ω –∏–Ω–¥–µ–∫—Å–æ—Ç –∑–∞ {last_day.strftime('%d.%m.%Y')}: {value}")
            except (IndexError, KeyError):
                print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞—ö–µ –æ–¥ JSON.")
        else:
            print("‚ùå API –ø–æ–≤–∏–∫ –Ω–µ—É—Å–ø–µ—à–µ–Ω. –ö–æ–¥:", response.status_code)

df = df.sort_values('–ú–µ—Å–µ—Ü').reset_index(drop=True)

# === –§–£–ù–ö–¶–ò–ò –ó–ê –ü–†–ï–°–ú–ï–¢–ö–ê ===
def days_between(d1, d2):
    return (d1 - d2).days

def calculate_excel_like_inflation(df, index, years):
    from pandas.tseries.offsets import DateOffset

    months_back = years * 12
    if index < months_back:
        return np.nan

    current_date = df.loc[index, '–ú–µ—Å–µ—Ü']
    try:
        # –ó–µ–º–∞–º–µ –∏–Ω–¥–µ–∫—Å–æ—Ç –∑–∞ —Å–µ–∫–æ–∏ 12 –º–µ—Å–µ—Ü–∏ –Ω–∞–∑–∞–¥
        idxs = [index - i * 12 for i in range(years)]
        idxs.insert(0, index)  # –¥–æ–¥–∞—ò –≥–æ –∏ —Ç–µ–∫–æ–≤–Ω–∏–æ—Ç –º–µ—Å–µ—Ü
        indexes = df.loc[idxs, '–ò–Ω–¥–µ–∫—Å'].values

        if any(pd.isnull(indexes)):
            return np.nan

        product = np.prod(indexes) / (100 ** (years + 1))

        past_date = current_date - DateOffset(months=months_back)
        days_diff = (current_date - past_date).days

        if days_diff <= 0:
            return np.nan

        infl = (product ** (365 / days_diff) - 1) * 100
        return round(infl, 2)
    except Exception as e:
        print(f"–ì—Ä–µ—à–∫–∞ –∑–∞ —Ä–µ–¥ {index}: {e}")
        return np.nan


# === 1 –ì–û–î–ò–ù–ê (—Å–µ –∑–∞–¥—Ä–∂—É–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞!) ===
infl1 = []
for i in range(len(df)):
    if i >= 12:
        now = df.at[i, '–ò–Ω–¥–µ–∫—Å']
        past = df.at[i - 12, '–ò–Ω–¥–µ–∫—Å']
        d1 = df.at[i, '–ú–µ—Å–µ—Ü']
        d2 = df.at[i - 12, '–ú–µ—Å–µ—Ü']
        days = days_between(d1, d2)
        try:
            val = ((now / 100) ** (365 / days) - 1) * 100
            infl1.append(round(val, 2))
        except:
            infl1.append(np.nan)
    else:
        infl1.append(np.nan)


# === –ó–ê–ü–ò–®–ò –°–ê–ú–û –ö–û–†–ò–ì–ò–†–ê–ù–ò –ò –¢–û–ß–ù–ò –ö–û–õ–û–ù–ò ===
df['–ò–Ω—Ñ–ª–∞—Ü–∏—ò–∞ –ì–æ–¥–∏—à–Ω–æ (%)'] = infl1


# === –ü–µ—Ç–≥–æ–¥–∏—à–Ω–∞ –∏–Ω—Ñ–ª–∞—Ü–∏—ò–∞ (4-—Ç–∞ –∫–æ–ª–æ–Ω–∞) ===
df['–ò–Ω—Ñ–ª–∞—Ü–∏—ò–∞ 5 –ì–æ–¥–∏–Ω–∏ (%)'] = [calculate_excel_like_inflation(df, i, 5) for i in range(len(df))]


# === –°–µ–¥—É–º–≥–æ–¥–∏—à–Ω–∞ –∏–Ω—Ñ–ª–∞—Ü–∏—ò–∞ (5-—Ç–∞ –∫–æ–ª–æ–Ω–∞) ===
df['–ò–Ω—Ñ–ª–∞—Ü–∏—ò–∞ 7 –ì–æ–¥–∏–Ω–∏ (%)'] = [calculate_excel_like_inflation(df, i, 7) for i in range(len(df))]

# === –§–æ—Ä–º–∞—Ç–∏—Ä–∞—ö–µ –∏ –∑–∞–ø–∏—Å ===
df['–ú–µ—Å–µ—Ü'] = df['–ú–µ—Å–µ—Ü'].dt.strftime('%d.%m.%Y')
df = df[['–ú–µ—Å–µ—Ü', '–ò–Ω–¥–µ–∫—Å', '–ò–Ω—Ñ–ª–∞—Ü–∏—ò–∞ –ì–æ–¥–∏—à–Ω–æ (%)', '–ò–Ω—Ñ–ª–∞—Ü–∏—ò–∞ 5 –ì–æ–¥–∏–Ω–∏ (%)', '–ò–Ω—Ñ–ª–∞—Ü–∏—ò–∞ 7 –ì–æ–¥–∏–Ω–∏ (%)']]
df['–ò–Ω–¥–µ–∫—Å'] = df['–ò–Ω–¥–µ–∫—Å'].round(2)
df.to_excel(file_path, index=False, float_format="%.2f", sheet_name='baza_inflacija')

print("üìÅ –ü–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ —Å–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—à–∞–Ω–∏ —Å–æ –¢–û–ß–ù–ò –∏–Ω—Ñ–ª–∞—Ü–∏—Å–∫–∏ –∫–æ–ª–æ–Ω–∏.")
# === –î–û–î–ê–î–ï–ù–û: –ü–æ–ª—É–≥–æ–¥–∏—à–µ–Ω –∏–∑–≤–µ—à—Ç–∞—ò –∏ –≥—Ä–∞—Ñ–∏–∫ ===
import matplotlib.pyplot as plt

# –í—Ä–∞—Ç–∏ '–ú–µ—Å–µ—Ü' –Ω–∞–∑–∞–¥ –≤–æ datetime –æ–±–ª–∏–∫ (–∑–∞ –≥—Ä—É–ø–∏—Ä–∞—ö–µ)
df['–ú–µ—Å–µ—Ü'] = pd.to_datetime(df['–ú–µ—Å–µ—Ü'], dayfirst=True)

# –ì—Ä—É–ø–∏—Ä–∞—ö–µ –ø–æ –≥–æ–¥–∏–Ω–∞ –∏ –ø–æ–ª—É–≥–æ–¥–∏–µ
df['–ì–æ–¥–∏–Ω–∞'] = df['–ú–µ—Å–µ—Ü'].dt.year
df['–ü–æ–ª—É–≥–æ–¥–∏–µ'] = df['–ú–µ—Å–µ—Ü'].dt.month.apply(lambda x: 'H1' if x <= 6 else 'H2')

# –ü—Ä–µ—Å–º–µ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ—Å–µ—á–µ–Ω –∏–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—É–≥–æ–¥–∏–µ
semiannual_df = df.groupby(['–ì–æ–¥–∏–Ω–∞', '–ü–æ–ª—É–≥–æ–¥–∏–µ'])['–ò–Ω–¥–µ–∫—Å'].mean().reset_index()
semiannual_df['–ò–Ω–¥–µ–∫—Å'] = semiannual_df['–ò–Ω–¥–µ–∫—Å'].round(2)

# –ó–∞–ø–∏—à–∏ —ò–∞ —Ç–∞–±–µ–ª–∞—Ç–∞ –≤–æ –Ω–æ–≤ –ª–∏—Å—Ç –≤–æ Excel —Ñ–∞—ò–ª–æ—Ç
with pd.ExcelWriter(file_path, mode='a', engine='openpyxl', if_sheet_exists='replace') as writer:
    semiannual_df.to_excel(writer, sheet_name='–ü–æ–ª—É–≥–æ–¥–∏—à–µ–Ω –∏–∑–≤–µ—à—Ç–∞—ò', index=False)

print("üìä –ü–æ–ª—É–≥–æ–¥–∏—à–Ω–∞—Ç–∞ —Ç–∞–±–µ–ª–∞ –µ –¥–æ–¥–∞–¥–µ–Ω–∞ –≤–æ Excel —Ñ–∞—ò–ª–æ—Ç.")

# === –ì–µ–Ω–µ—Ä–∏—Ä–∞—ö–µ –≥—Ä–∞—Ñ–∏–∫ ===
pivot_df = semiannual_df.pivot(index='–ì–æ–¥–∏–Ω–∞', columns='–ü–æ–ª—É–≥–æ–¥–∏–µ', values='–ò–Ω–¥–µ–∫—Å')
pivot_df.plot(kind='bar', figsize=(10, 6), title='–ü–æ–ª—É–≥–æ–¥–∏—à–µ–Ω –∏–Ω–¥–µ–∫—Å –Ω–∞ —Ç—Ä–æ—à–æ—Ü–∏ –Ω–∞ –∂–∏–≤–æ—Ç –ø–æ –≥–æ–¥–∏–Ω–∏')
plt.ylabel('–ò–Ω–¥–µ–∫—Å')
plt.grid(True)
plt.tight_layout()
plt.savefig("Polugodishen_grafik.png")
plt.show()
print("üìà –ì—Ä–∞—Ñ–∏–∫–æ—Ç –µ —Å–Ω–∏–º–µ–Ω –∫–∞–∫–æ Polugodishen_grafik.png")

